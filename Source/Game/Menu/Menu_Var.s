;********************************
; MENU_VAR.S
;********************************
;	Author:	ExoByte
;	(c)2000	Interactive Imagination
;	All rights reserved

;********************************
MENU_VRAM_ARCHIVE	DS	$200	;SAVE THE CONSISTANT TILES AT BOTTOM OF VRAM HERE																																																																	HELLO
MENU_PAL_ARCHIVE	DS	64

;********************************
;MAIN MENU STUFF
MENU_CHAR_LEFT			DS 	$01		;HOW MANY CHARS LEFT IN CURRENT STRING
MENU_CUR_CHAR			DS	$02		;ADDR OF WHATS GOING TO VRAM
MENU_VRAM_PTR			DS	$02		;WHERE ARE WE IN VRAM? WELL?
MENU_CUR_MENU			DS 	$01		;WHAT MENU ARE WE ON?
MENU_DYN_NUM_TILE		DS	$03		;WHERE DYNAMIC NUMBERS GO TO BE VRAM PACKED
MENU_DIRTY				DS	$01		;DOES THE MENU NEED TO BE REDRAWN?
MENU_CREATURE_INDEX		DS	$01		;WHICH RING (0-9) ARE WE ON?
MENU_MAIN_VALID			DS	$2B		;VALID ARRAY FOR MAIN MENU 
MENU_DYN				DS	$0A		;ADDRS OF WHICH 5 ITEMS ARE BEING DYNAMICLY MADE
MENU_DYN_XRAM_BASE		DS	$02		;WHICH XRAM TABLE ARE WE ON
MENU_DYN_TABLE_BASE		DS	$02		;WHICH ITEM/SPEL/RELIC TABLE ARE WE ON
MENU_PG_EDGE			DS	$01		;00 FOR NONE, 1 FOR RIGHT, 2 FOR LEFT
MENU_CURSOR_START		DS	$01		;WHERE DOES THIS MENU'S CURSORS START
MENU_INV_SIZE			DS	$01		;SIZE OF THE INVENTORY OBJECT WE'RE DEALING W/
MENU_COUNTER			DS	$01		;MISC COUNTER FOR LOOPS, ETC.
MENU_NAME_BUFFER		DS	$0A		;BUFFER FOR CREATURE NAMES
MENU_COMMAND_BUFFER		DS	012
MENU_CURRENT_RELIC		DS	$01		;WHICH RELIC WE'RE WORKING ON (0/1)
MENU_CACHED_RELIC		DS	$01		;SELECT-DE-EQUIPED RELIC
MENU_LEARNED_ABIL		DS	$01
MENU_USED_ITEM			DS	$01
MENU_EMPTY_RELIC_LIST	DS	$01
MENU_SAVE_ENABLE		DS	$01		;CAN WE SAVE NOW?
MENU_DISABLE_MAIN		DS	$01		;SHUT DOWN THE MAIN MENU


;********************************
;GENERIC MENU STUFF
MENU_RETURN_VALUE	DS	$01		;FOR RETURN VALS FROM GENERIC MENU
MENU_CURSOR_VRAM	DS	$01		;VRAM TILE OF THE CURSOR
MENU_KEY_MASK		DS	$01		;SET BITS TO 0 OF KEYS YOU WANT TO EAT
MENU_A_FUNC			DS	$02		;WHAT FUNC TO CALL WHEN A IS HIT
MENU_B_FUNC			DS	$02		;WHAT FUNC TO CALL WHEN B IS HIT
MENU_CURSOR_TABLE	DS	$02		;WHERE IS THE CURSOR TABLE ?
MENU_START_FUNC		DS	$02		;WHAT FUNC TO CALL WHEN START IS HIT
MENU_SELECT_FUNC	DS	$02		;WHAT FUNC TO CALL WHEN SELECT IS HIT
MENU_INIT_INDEX		DS	$01		;FOR MENU_INIT TO FIND TABLE INDEX
MENU_TXT_COUNT		DS	$01
MENU_VALID_ARRAY	DS	$02		;ARRAY FOR VALID CHOICES.
MENU_VALID_BANK		DS	$01		;BANK FOR ABOVE
MENU_BLINK_FLAG		DS	$01		;SET TO MENU_CURSOR_NOBLINK FOR NEVER BLINK
MENU_CURSORTYPE		DS	$01		;BG OR SPRITE BASED CURSOR
MENU_BGCURSOR_OLD	DS	$02		;ADDR OF OLD BG BASED CURSOR
MENU_BGCURSOR_NEW	DS	$02		;ADDR OF NEW BG BASED CURSOR
MENU_BASETILE		DS	$02		;FOR BORDER MACROS

;********************************
;SPECIALITY MENU STUFF
MENU_SPEC_CHOICES			DS	$01	;HOW MANY (2-4) CHOICES DO I GET
MENU_SPEC_CHOICE_ARRAY		DS	$04	;ARRAY FROM ABOVE

;MENU SHOP/HISTORIAN/MUSIC/SPECIAL
;----------
MENU_SPECIAL_COUNTER		DS	$02	;counter/storage holder
MENU_SPECIAL_ITEM_NUM		DS	$01 ;how many items have been displayed on the screen so far
MENU_SPECIAL_NUMBER_HOLDER	DS	$02 ;number holder for dump function
MENU_SPECIAL_MODE			DS	$01	;whether the menu is in Buy/Sell mode
MENU_SPECIAL_TOTAL_ITEMS	DS	$01	;how many items are there in the present list
MENU_SPECIAL_ON_SCREEN		DS	$08	;the list items that are currently on the screen
MENU_SPECIAL_TOP_ITEM		DS	$01	;the top item on the list
MENU_SPECIAL_VALID			DS	$0D	;the valid menu array for the shop
MENU_SPECIAL_MENU_SECTION	DS	$01	;the side of the valid menu that cursor is on...00 lower, 01 upper
MENU_SPECIAL_TYPE_ADD		DS	$02	;addres of where in xram item type starts
MENU_SPECIAL_TYPE_TABLE		DS	$02	;the table of the item type to use
MENU_SPECIAL_TYPE_SIZE		DS	$01	;the size of the type selected
MENU_SPECIAL_TYPE_OFFSET	DS	$01	;the offset to the name string in the type
MENU_SPECIAL_NAME_SIZE		DS	$01	;the size of the name of the selected type
MENU_SPECIAL_VRAM_ARROW_POS	DS	$01	;the tile in vram of where the arrow is stored
MENU_SPECIAL_UPDATE_VAR		DS	$0F	;a holding variable for amounts that need to be updated to screen

MENU_SHOP_ITEM_SOLDOUT		DS	$01 ;indicates whether an item has just sold out or not

MENU_HISTORIAN_TYPE_NUMBER	DS	$01	;the number of the item selected from the menu
MENU_HISTORIAN_TYPE			DS	$01	;the return type from the menu  0: items  1: spells  2: relics

MENU_RINGUP_COSTS			DS	$19	;the ringsmiths list of creatures it can level associated with on_screen rings
MENU_RINGUP_SCREEN_LEVELS	DS	$08	;the levels of each of the creatures currentl on_screen

;MENU RINGSMITH
;----------------------
RINGSMITH_BANKFULL		DS	$01	;Is Tony's ringbank full?
RINGSMITH_TABLE_SIZE	DS	$01	;Bank of the ringsmith table
RINGSMITH_TOP_ENTRY		DS	$01	;Top item on the screen
RINGSMITH_ON_SCREEN		DS	024	;All three items on screen
RINGSMITH_DISPLAYED		DS	$01	;How many on the screen now
RINGSMITH_LAST_POS		DS	$01	;Check for cursor move
RINGSMITH_INFO_BG_OFF	DS	$02	;Offset for info loop BG
RINGSMITH_INFO_VRAM_OFF	DS	$02	;Offset for info loop VRAM
RINGSMITH_VBLANK_BUFFER	DS	007	;Buffer for vblank
RINGSMITH_VB_BG			DS	$02	;Where in BG vblank reads from
RINGSMITH_MADERING		DS	$01	;Did we make a ring?
RINGSMITH_COST_TO_SET	DS	$02	;These are the amounts after
RINGSMITH_1ST_TO_SET	DS	$02	;buying the ring
RINGSMITH_2ND_TO_SET	DS	$02	;
RINGSMITH_LVL_TO_RAISE	DS	$01	;Lvl to make the creature
RINGSMITH_CREATURE_MAKE	DS	$01	;Who we're making
RINGSMITH_XRAM_CREATURE	DS	$02	;XRAM ADDY OF CREATURE
RINGSMITH_BORROW_BORDER	DS	$01	;Flag to let ringbank borrow border
RINGSMITH_CURSOR_RETURN	DS	$01	;Cursor to return to
RINGSMITH_AUTOEQUIP		DS	$01	;autoequip slot

;MENU RINGBANK
;----------------------
RINGBANK_TOP_ENTRY		DS	$01	;Top item on the screen
RINGBANK_NUM_CREATURES	DS	$01	;How many creatures in bank
RINGBANK_ON_SCREEN		DS	014	;ID and lvl of whats on screen	
RINGBANK_DISPLAYED		DS	$01	;How many are on the screen
RINGBANK_ACTING_ON		DS	$01	;which ring are we acting on
RINGBANK_SELECT_RETURN	DS	$01	;return code from selected
RINGBANK_EQUIPPED_RINGS	DS	010	;Rings currently on
RINGBANK_CURSOR_RETURN	DS	$01	;Cursor to return to
RINGBANK_EQUIP_REPLACE	DS	$01	;Ring being replaced when equipped
RINGBANK_VBLANK_CLEAR	DS	$02	;Addr of what to clear
RINGBANK_VBLANK_ADD		DS	$02	;Addr of what to add
RINGBANK_RELIC_0		DS	$01	;Relic0 to salvage
RINGBANK_RELIC_1		DS	$01	;Relic1 to salvage

;********************************
;MENU_PLOT_VARS
MENU_PLOT_BG_TILE		DS	$02		;WHERE IN BG IT NEEDS TO BG
MENU_PLOT_BG_COUNT		DS	$01		;COUNTER 

;********************************
;CURRENT TABLE ENTRY FOR CURSOR
;AND OTHER CURSOR INFO
MENU_BLINK				DS	$01		;BLINKY BLINKY, JUDICIAL SYSTEM!
MENU_CONFIRM			DS	$01		;ARE WE COMFIRMING A SELECTION? 
MENU_CURSOR_ID			DS	$01		;ID OF THE CURSORS POS
MENU_CURSOR_ENTRY_X		DS	$01		;WHERES THE CURSOR XWISE?
MENU_CURSOR_ENTRY_Y		DS	$01		;WHERES THE CURSOR YWISE?
MENU_CURSOR_ENTRY_R		DS	$01
MENU_CURSOR_ENTRY_L		DS	$01
MENU_CURSOR_ENTRY_U		DS	$01
MENU_CURSOR_ENTRY_D		DS	$01
MENU_CURSOR_ENTRY_A		DS	$01
MENU_CURSOR_ENTRY_B		DS	$01

;********************************
;INVENTORY COPYING VARS

INV_GIVE_RELIC_SUCCESSFUL
INV_GIVE_SPELL_SUCCESSFUL
INV_GIVE_ITEM_SUCCESSFUL	DS	$01		;Was the item given successfully?

INV_GIVE_SPELL_NUMBER
INV_GIVE_RELIC_NUMBER
INV_GIVE_ITEM_NUMBER		DS	$01		;The item number to give to tony

BTL_NAME_INDEX
INV_OBJ_INDEX				DS	$01		;INVENTORY STRUCT WE ARE COPYING(INDEX)

BTL_TABLE_COPY_FROM
INV_OBJ_PTR					DS	$02		;INVENTORY STRUCT WE ARE COPYING(PTR)

BTL_TABLE_COPY_TO
INV_ADDR					DS	$02		;WHERE WE ARE COPYING IT TO

MENU_STAT_BUFFER
BTL_TABLE_COPY_BUFFER
INV_CURRENT				DS	$40		;MAKE BIGGER IF IT EVER NEEDS TO BE

BTL_CMD_BASE_PTR		DS	$02
BTL_TEXT_BUFFER_PTR		DS	$02

BTL_COPY_COST_FLAG		DS	$01		;COPY COST W/ NAME?

;********************************
;NAME STR STUFF
MENU_NAME_INDEX			DS	$01		;INDEX OF THE NAME WE WANT
MENU_NEW_INFO			DS	$01 	;NEW INFO ON THE DYNAMICS?

;********************************
	END
;********************************